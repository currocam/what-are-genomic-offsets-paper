// This script is based on https://github.com/kr-colab/spatial_sims_standard
// It assumes genetic diversity has been generated already using msprime
// and that there are two adaptive phenotypes
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();	
	// Constant parameters
	defineConstant("LIFETIME", 1); // average life span
	defineConstant("SZ_def", 0.5); // sigma_Z, dispersal fitness Gaussian
	defineConstant("SD", 0.3); // sigma_D, dispersal distance
	defineConstant("SX", 0.3); // sigma_X, interaction distance for measuring
	defineConstant("SM", 0.3); // sigma_M, mate choice distance
	defineConstant("K", 2*20); // carrying capacity per unit area. The factor of 2 decreases the "initial" bottleneck
	defineConstant("WIDTH", 20.0); // width of the simulated area
	defineConstant("HEIGHT", 20.0); // height of the simulated area
	defineConstant("RUNTIME", 5000); // Number of ticks
	defineConstant("L", 1e8); // genome length
	defineConstant("R", 1e-9); // recombination rate    
	// Derived parameters
	defineConstant("FECUN", 1 / LIFETIME);
	defineConstant("RHO", FECUN / ((1 + FECUN) * K));
	
	// basic genetics
	initializeMutationRate(0.0);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "f", 0.0); // QTLs phenotype 1
	initializeMutationType("m3", 0.5, "f", 0.0); // QTLs phenotype 2
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
	
	// spatial interaction for local density measurement
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX);
	i1.setInteractionFunction("n", 1, SX);
	
	// spatial interaction for mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
	i2.setInteractionFunction("n", 1, SM);

}

// We want to handle the impact of QTLs in fitness ourselves
mutationEffect(m2) { return 1.0; }
mutationEffect(m3) { return 1.0; }

// Initialize the simulation
1 late() { initialize(); }

// preparation for the reproduction() callback
2: first() { i2.evaluate(p0); }

reproduction() {
	mate = i2.drawByStrength(individual, 1);
	if (mate.size())
		subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}

2: early() {
	factor = (100-sim.cycle)*0.01;
	defineGlobal("SZ", SZ_def * factor);
	if (factor <= 1.0)
	{
		defineGlobal("SZ", SZ_def);
		community.deregisterScriptBlock(self);
	}
}

2: early() {
	// Disperse offspring
	offspring = p0.subsetIndividuals(maxAge=0);
	p0.deviatePositions(offspring, "reprising", INF, "n", SD);
	// Measure local density and use it for density regulation
	i1.evaluate(p0);
	inds = p0.individuals;
	competition = i1.localPopulationDensity(inds);
	inds.fitnessScaling = 1 / (1 + RHO * competition);
	env1 = p0.spatialMapValue(ENV1,inds.spatialPosition);
	env2 = p0.spatialMapValue(ENV2,inds.spatialPosition);
	w = relativeFitness(
		inds.sumOfMutationsOfType(m2), env1
		) *
		relativeFitness(
		inds.sumOfMutationsOfType(m3), env2
		)
		;
	inds.fitnessScaling = inds.fitnessScaling * w;
}

late() {
	// Error handling
	if (p0.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
	if (community.tick % 100 == 0)
    	catn("Tick : " + community.tick + ", Ne: " + p0.individualCount);
}

RUNTIME late() {
	catn("End of simulation (run time reached)");
	saveResults();
}

// Initialize the simulation
function (void) initialize(void) {
	sim.readFromPopulationFile(INITFILE);
	inds = p0.individuals;
	p0.setSpatialBounds(c(0, 0, WIDTH, HEIGHT));
	// Record positions & phenotypes
	positions = p0.pointUniform(p0.individualCount);
	inds.setSpatialPosition(positions);
	// Simulate heterogenous landscape
	mapValues = matrix(runif(25, -1, 1), ncol=5);
	map1 = p0.defineSpatialMap("map1", "xy", mapValues, interpolate=T);
	defineConstant("ENV1", map1);
	// Simulate heterogenous landscape *after*
	mapValues2 =mapValues + runif(length(mapValues), -0.5, 0.5);
    mapValues2 = pmax(min(mapValues), pmin(mapValues2, max(mapValues)));
	map2 = p0.defineSpatialMap("map2", "xy", mapValues2, interpolate=T);
	defineConstant("ENV_ALTERED1", map2);
	// The same but for the second phenotype
	mapValues = matrix(runif(25, -1, 1), ncol=5);
	map3 = p0.defineSpatialMap("map3", "xy", mapValues, interpolate=T);
	defineConstant("ENV2", map3);
	mapValues2 =mapValues + runif(length(mapValues), -0.5, 0.5);
    mapValues2 = pmax(min(mapValues), pmin(mapValues2, max(mapValues)));
	map4 = p0.defineSpatialMap("map4", "xy", mapValues2, interpolate=T);
	defineConstant("ENV_ALTERED2", map4);
}

function (void) saveResults(void) {
	inds = p0.individuals;
	params = Dictionary(
		"x", inds.x,
		"y", inds.y,
		"PHENOTYPE1", inds.sumOfMutationsOfType(m2),
		"PHENOTYPE2", inds.sumOfMutationsOfType(m3),
		"ENV1",
		p0.spatialMapValue(ENV1,inds.spatialPosition),
		"ENV_ALTERED1",
		p0.spatialMapValue(ENV_ALTERED1,inds.spatialPosition),
		"ENV2",
		p0.spatialMapValue(ENV2,inds.spatialPosition),
		"ENV_ALTERED2",
		p0.spatialMapValue(ENV_ALTERED2,inds.spatialPosition)
		);
	params.setValue(
		"FITNESS", relativeFitness(
		params.getValue("PHENOTYPE1"),
		params.getValue("ENV1")
		)*
		relativeFitness(
		params.getValue("PHENOTYPE2"),
		params.getValue("ENV2")
		)
		);
	params.setValue(
		"FITNESS_ALTERED", relativeFitness(
		params.getValue("PHENOTYPE1"),
		params.getValue("ENV_ALTERED1")
		)*
		relativeFitness(
		params.getValue("PHENOTYPE2"),
		params.getValue("ENV_ALTERED2")
		)
		);
	
	sim.treeSeqOutput(OUTFILE, metadata=params);
	sim.simulationFinished();

}

function (numeric)optimumUnderEnv(numeric env) {
	// For simplicity, identity function!
	return env;
}

function (numeric)relativeFitness(numeric pheno, numeric env) {
	return dnorm(pheno, optimumUnderEnv(env), SZ) / dnorm(0.0, 0.0, SZ);
}
